class Solution {
    public List<String> letterCombinations(String digits) {
        if (digits == null || digits.length() == 0) {
            return new ArrayList<>(); // Return an empty list if digits is empty or null.
        }

        HashMap<Character, String> map = new HashMap<>();
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");

        List<String> res = new ArrayList<>();
        StringBuilder ans = new StringBuilder();
        solve(res, ans, map, digits, 0);
        return res;
    }

    void solve(List<String> res, StringBuilder ans, HashMap<Character, String> map, String digits, int index) {
        if (index == digits.length()) {
            res.add(ans.toString());
            return;
        }

        char ch = digits.charAt(index);
        String possibleChars = map.get(ch);
        for (char c : possibleChars.toCharArray()) {
            ans.append(c); // Append the character
            solve(res, ans, map, digits, index + 1);
            ans.deleteCharAt(ans.length() - 1); // Backtrack by removing the last character
        }
    }
}
